All the parallel runs are using sge_par.sh developed by Mike.

[working environment:
Python 2.7.7 installed on [GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2 ]


1. extract the 21CFR XML files into simple csv files:
   input: 21 CFR XML files
   output: each section as a csv file stored in output/section/ folder
   python file (non run-parallel): extract_all_paragraph_specific_section.py

2. clean up the csv files from step 1:
   input: all csv files in folder: output/section/
   output: all csv files in folder: output/section/clean
   python file (run-parallel) :parse_section_csv.py   
   
3. Use the clean csv files, tranfer them into text file for RAKE input
   input: output from step 2
   output: all text files under folder: output/text_section/RAKE
   python file (run-parallel): cleanCSV_to_text_single.py

4. RAKE key word extraction:
   Pre-request for running this step: download the rake_tutorial folder from GitHub site:https://github.com/zelandiya/RAKE-tutorial
   Has to run the python code under the RAKE-tutorial-master folder
   input: output from step 3
   output: all the ".key" files under /output/CFR_keywords_RAKE/
   python file (run-parallel): bulk_key_word.py
   
5. generate a file to contain all the key phrases dictionary: key phrase in its natural form is the key, and the key phrase without space is the value. This step also stem the words
   input: output from step 4
   output: a pickle dumpped dictionary under folder output: output/myKeyPhraseDict.txt
   python file (run-parallel): key_phrase_dict_single.py


6. tranform the 21 CFR text using this dictionary, so all the key phrases will become one word for Gensim LDA topic modeling.
   input: load the output dictinary file that is the output from step 5. and use the output files from step 3.
   output: tall the ".txt" file under folder: /output/21CFR_dictionary/
   python file (run-parallel): dictionary_rebuild_single.py
   LIST filename: temp_key_rake.lst
   
7. Linux command: merge the files under 21CFR_dictionary into one file: go under the directory and merge the files.
   cat * > merged-file.txt 
   
8. build the dictionary that will used by Gensim lDA package
   input: output from step 7.
   output: a dictionary file under the 21CFR_tmp folder : runs/gensim_tmp/dictionary/21CFR_2wp_dict.dict
   python file (non run-parallel):dictionary_rebuild_step2.py

9. Genreate the Gensim_LDA model topic modeling list file
   input : dictionary from step 8. output file from step 6.
   output: Gensim topic modeling list under the folder: output/gensim_LDA_out/
   python file (run-parallel): gensim_LDA_single.py
   LIST name : temp_21CFR_dictionary.lst
   sh file name : sge_par_LDA.sh
   # to avoid writing and reading from the same file. All the intermediate files are saved in gensim_tmp folder: mmCorpus (7305 files), lda_model(7305 files).logfile is written for each file as well.

10.Change the gensim output file to csv file, and sort the result.
   First: one command to delete the "[digit]" at the end of the line.
   sed -i 's/\[[0-9]\]$//' *
   
   input: output from step 9.
   output: csv files format of the input files.
   Python file (run-parallel): gensim_result_rebuild.py
   LIST: gensim_full.lst
   
11. Calculate the final score.
    Pre-request files: title word bag file(logfile/titlewordbagfile.txt) and definition file (output/11_201.txt)
	definition file was generated by a script: (Extract_definitions_from_sections.ipynd) -- need to revise.
	11.1 put the definition words and title words into a list respectively.
	     input: titlewordbagfile.txt, 11_201.txt
	     output: def_word_bag_list.txt (count 4990) title_word_bag_list.txt (count 640)
	     Python file (non run-parallel): final_keyword_s1.py
             11.1.1 save the section titles into a dictionary for later use
	           Python file (non run-parallel) : final_keyword_s1_1.py
	11.2 put the gensim output file into a list for later use
	     input: output from step 10
		 output: gensim_score_dict file in Gensim_score_list/ folder
		 Python file (run-parallel) : final_keyword_s2.py
		 LIST: gensim_LDA_out_csv.lst
	11.3 calculate each section's final score, and save it to a txt file
		 input: load the output from 11.1, and 11.2. output from step 4.
		 output: final_key txt file in ouput/final_key_txt
		 Python file (run-parallel): final_keyword_s3_txt.py
		 LIST: CFR_RAKE_key.lst
	11.4 Alternative to 11.3, save the result to doc file for reviewer to review.
		 input: load the output from 11.1, and 11.2. output from step 4.
		 output: final_key txt file in ouput/final_key_doc  (the docx module is not available at the moment, output files are not available)
		 Python file (run-parallel): final_keyword_s3_doc.py
		 LIST: CFR_RAKE_key.lst	
